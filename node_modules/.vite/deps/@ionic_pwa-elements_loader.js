import "./chunk-DFKQJ226.js";

// node_modules/@ionic/pwa-elements/dist/esm/polyfills/index.js
function applyPolyfills() {
  if (typeof window !== "undefined") {
    let checkIfURLIsSupported = function() {
      try {
        var u = new URL("b", "http://a");
        u.pathname = "c%20d";
        return u.href === "http://a/c%20d" && u.searchParams;
      } catch (e) {
        return false;
      }
    };
    var win2 = window;
    var promises = [];
    if (!win2.customElements || win2.Element && (!win2.Element.prototype.closest || !win2.Element.prototype.matches || !win2.Element.prototype.remove)) {
      promises.push(import("./dom-E6CW65SY.js"));
    }
    if ("function" !== typeof Object.assign || !Object.entries || !Array.prototype.find || !Array.prototype.includes || !String.prototype.startsWith || !String.prototype.endsWith || win2.NodeList && !win2.NodeList.prototype.forEach || !win2.fetch || !checkIfURLIsSupported() || typeof WeakMap == "undefined") {
      promises.push(import("./core-js-L7NKQFLC.js"));
    }
    return Promise.all(promises);
  }
  return Promise.resolve();
}

// node_modules/@ionic/pwa-elements/dist/esm-es5/core-f86805ad.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var queueCongestion = 0;
var queuePending = false;
var scopeId;
var hostTagName;
var isSvgMode = false;
var win = typeof window !== "undefined" ? window : {};
var CSS = win.CSS;
var doc = win.document || { head: {} };
var plt = {
  $flags$: 0,
  $resourcesUrl$: "",
  jmp: function(h2) {
    return h2();
  },
  raf: function(h2) {
    return requestAnimationFrame(h2);
  },
  ael: function(el, eventName, listener, opts) {
    return el.addEventListener(eventName, listener, opts);
  },
  rel: function(el, eventName, listener, opts) {
    return el.removeEventListener(eventName, listener, opts);
  }
};
var supportsShadowDom = function() {
  return (doc.head.attachShadow + "").indexOf("[native") > -1;
}();
var promiseResolve = function(v) {
  return Promise.resolve(v);
};
var supportsConstructibleStylesheets = function() {
  try {
    new CSSStyleSheet();
    return true;
  } catch (e) {
  }
  return false;
}();
var hostRefs = /* @__PURE__ */ new WeakMap();
var getHostRef = function(ref) {
  return hostRefs.get(ref);
};
var registerHost = function(elm) {
  var hostRef = {
    $flags$: 0,
    $hostElement$: elm,
    $instanceValues$: /* @__PURE__ */ new Map()
  };
  {
    hostRef.$onInstancePromise$ = new Promise(function(r) {
      return hostRef.$onInstanceResolve$ = r;
    });
  }
  {
    hostRef.$onReadyPromise$ = new Promise(function(r) {
      return hostRef.$onReadyResolve$ = r;
    });
    elm["s-p"] = [];
    elm["s-rc"] = [];
  }
  return hostRefs.set(elm, hostRef);
};
var isMemberInElement = function(elm, memberName) {
  return memberName in elm;
};
var consoleError = function(e) {
  return console.error(e);
};
var moduleCache = /* @__PURE__ */ new Map();
var loadModule = function(cmpMeta, hostRef, hmrVersionId) {
  var exportName = cmpMeta.$tagName$.replace(/-/g, "_");
  var bundleId = cmpMeta.$lazyBundleIds$;
  var module = moduleCache.get(bundleId);
  if (module) {
    return module[exportName];
  }
  return import(
    /* webpackInclude: /\.entry\.js$/ */
    /* webpackExclude: /\.system\.entry\.js$/ */
    /* webpackMode: "lazy" */
    "./" + bundleId + ".entry.js"
  ).then(function(importedModule) {
    {
      moduleCache.set(bundleId, importedModule);
    }
    return importedModule[exportName];
  }, consoleError);
};
var styles = /* @__PURE__ */ new Map();
var queueDomReads = [];
var queueDomWrites = [];
var queueDomWritesLow = [];
var queueTask = function(queue, write) {
  return function(cb) {
    queue.push(cb);
    if (!queuePending) {
      queuePending = true;
      if (write && plt.$flags$ & 4) {
        nextTick(flush);
      } else {
        plt.raf(flush);
      }
    }
  };
};
var consume = function(queue) {
  for (var i = 0; i < queue.length; i++) {
    try {
      queue[i](performance.now());
    } catch (e) {
      consoleError(e);
    }
  }
  queue.length = 0;
};
var consumeTimeout = function(queue, timeout) {
  var i = 0;
  var ts = 0;
  while (i < queue.length && (ts = performance.now()) < timeout) {
    try {
      queue[i++](ts);
    } catch (e) {
      consoleError(e);
    }
  }
  if (i === queue.length) {
    queue.length = 0;
  } else if (i !== 0) {
    queue.splice(0, i);
  }
};
var flush = function() {
  queueCongestion++;
  consume(queueDomReads);
  var timeout = (plt.$flags$ & 6) === 2 ? performance.now() + 10 * Math.ceil(queueCongestion * (1 / 22)) : Infinity;
  consumeTimeout(queueDomWrites, timeout);
  consumeTimeout(queueDomWritesLow, timeout);
  if (queueDomWrites.length > 0) {
    queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);
    queueDomWrites.length = 0;
  }
  if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {
    plt.raf(flush);
  } else {
    queueCongestion = 0;
  }
};
var nextTick = function(cb) {
  return promiseResolve().then(cb);
};
var readTask = queueTask(queueDomReads, false);
var writeTask = queueTask(queueDomWrites, true);
var EMPTY_OBJ = {};
var SVG_NS = "http://www.w3.org/2000/svg";
var HTML_NS = "http://www.w3.org/1999/xhtml";
var isDef = function(v) {
  return v != null;
};
var isComplexType = function(o) {
  o = typeof o;
  return o === "object" || o === "function";
};
var patchEsm = function() {
  if (!(CSS && CSS.supports && CSS.supports("color", "var(--c)"))) {
    return import(
      /* webpackChunkName: "stencil-polyfills-css-shim" */
      "./css-shim-8775d9ad-556f0cc2-5YQE4DHP.js"
    ).then(function() {
      if (plt.$cssShim$ = win.__cssshim) {
        return plt.$cssShim$.i();
      } else {
        return 0;
      }
    });
  }
  return promiseResolve();
};
var HYDRATED_CSS = "{visibility:hidden}.hydrated{visibility:inherit}";
var createTime = function(fnName, tagName) {
  if (tagName === void 0) {
    tagName = "";
  }
  {
    return function() {
      return;
    };
  }
};
var uniqueTime = function(key, measureText) {
  {
    return function() {
      return;
    };
  }
};
var rootAppliedStyles = /* @__PURE__ */ new WeakMap();
var registerStyle = function(scopeId2, cssText, allowCS) {
  var style = styles.get(scopeId2);
  if (supportsConstructibleStylesheets && allowCS) {
    style = style || new CSSStyleSheet();
    style.replace(cssText);
  } else {
    style = cssText;
  }
  styles.set(scopeId2, style);
};
var addStyle = function(styleContainerNode, cmpMeta, mode, hostElm) {
  var scopeId2 = getScopeId(cmpMeta.$tagName$);
  var style = styles.get(scopeId2);
  styleContainerNode = styleContainerNode.nodeType === 11 ? styleContainerNode : doc;
  if (style) {
    if (typeof style === "string") {
      styleContainerNode = styleContainerNode.head || styleContainerNode;
      var appliedStyles = rootAppliedStyles.get(styleContainerNode);
      var styleElm = void 0;
      if (!appliedStyles) {
        rootAppliedStyles.set(styleContainerNode, appliedStyles = /* @__PURE__ */ new Set());
      }
      if (!appliedStyles.has(scopeId2)) {
        {
          if (plt.$cssShim$) {
            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId2, style, !!(cmpMeta.$flags$ & 10));
            var newScopeId = styleElm["s-sc"];
            if (newScopeId) {
              scopeId2 = newScopeId;
              appliedStyles = null;
            }
          } else {
            styleElm = doc.createElement("style");
            styleElm.innerHTML = style;
          }
          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector("link"));
        }
        if (appliedStyles) {
          appliedStyles.add(scopeId2);
        }
      }
    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {
      styleContainerNode.adoptedStyleSheets = __spreadArrays(styleContainerNode.adoptedStyleSheets, [style]);
    }
  }
  return scopeId2;
};
var attachStyles = function(elm, cmpMeta, mode) {
  var endAttachStyles = createTime("attachStyles", cmpMeta.$tagName$);
  var scopeId2 = addStyle(supportsShadowDom && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, mode, elm);
  if (cmpMeta.$flags$ & 10) {
    elm["s-sc"] = scopeId2;
    elm.classList.add(scopeId2 + "-h");
  }
  endAttachStyles();
};
var getScopeId = function(tagName, mode) {
  return "sc-" + tagName;
};
var h = function(nodeName, vnodeData) {
  var children = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    children[_i - 2] = arguments[_i];
  }
  var child = null;
  var simple = false;
  var lastSimple = false;
  var vNodeChildren = [];
  var walk = function(c) {
    for (var i = 0; i < c.length; i++) {
      child = c[i];
      if (Array.isArray(child)) {
        walk(child);
      } else if (child != null && typeof child !== "boolean") {
        if (simple = typeof nodeName !== "function" && !isComplexType(child)) {
          child = String(child);
        }
        if (simple && lastSimple) {
          vNodeChildren[vNodeChildren.length - 1].$text$ += child;
        } else {
          vNodeChildren.push(simple ? newVNode(null, child) : child);
        }
        lastSimple = simple;
      }
    }
  };
  walk(children);
  if (vnodeData) {
    {
      var classData_1 = vnodeData.className || vnodeData.class;
      if (classData_1) {
        vnodeData.class = typeof classData_1 !== "object" ? classData_1 : Object.keys(classData_1).filter(function(k) {
          return classData_1[k];
        }).join(" ");
      }
    }
  }
  var vnode = newVNode(nodeName, null);
  vnode.$attrs$ = vnodeData;
  if (vNodeChildren.length > 0) {
    vnode.$children$ = vNodeChildren;
  }
  return vnode;
};
var newVNode = function(tag, text) {
  var vnode = {
    $flags$: 0,
    $tag$: tag,
    $text$: text,
    $elm$: null,
    $children$: null
  };
  {
    vnode.$attrs$ = null;
  }
  return vnode;
};
var Host = {};
var isHost = function(node) {
  return node && node.$tag$ === Host;
};
var setAccessor = function(elm, memberName, oldValue, newValue, isSvg, flags) {
  if (oldValue !== newValue) {
    var isProp = isMemberInElement(elm, memberName);
    var ln = memberName.toLowerCase();
    if (memberName === "class") {
      var classList = elm.classList;
      var oldClasses_1 = parseClassList(oldValue);
      var newClasses_1 = parseClassList(newValue);
      classList.remove.apply(classList, oldClasses_1.filter(function(c) {
        return c && !newClasses_1.includes(c);
      }));
      classList.add.apply(classList, newClasses_1.filter(function(c) {
        return c && !oldClasses_1.includes(c);
      }));
    } else if (memberName === "style") {
      {
        for (var prop in oldValue) {
          if (!newValue || newValue[prop] == null) {
            if (prop.includes("-")) {
              elm.style.removeProperty(prop);
            } else {
              elm.style[prop] = "";
            }
          }
        }
      }
      for (var prop in newValue) {
        if (!oldValue || newValue[prop] !== oldValue[prop]) {
          if (prop.includes("-")) {
            elm.style.setProperty(prop, newValue[prop]);
          } else {
            elm.style[prop] = newValue[prop];
          }
        }
      }
    } else if (memberName === "ref") {
      if (newValue) {
        newValue(elm);
      }
    } else if (!isProp && memberName[0] === "o" && memberName[1] === "n") {
      if (memberName[2] === "-") {
        memberName = memberName.slice(3);
      } else if (isMemberInElement(win, ln)) {
        memberName = ln.slice(2);
      } else {
        memberName = ln[2] + memberName.slice(3);
      }
      if (oldValue) {
        plt.rel(elm, memberName, oldValue, false);
      }
      if (newValue) {
        plt.ael(elm, memberName, newValue, false);
      }
    } else {
      var isComplex = isComplexType(newValue);
      if ((isProp || isComplex && newValue !== null) && !isSvg) {
        try {
          if (!elm.tagName.includes("-")) {
            var n = newValue == null ? "" : newValue;
            if (memberName === "list") {
              isProp = false;
            } else if (oldValue == null || elm[memberName] != n) {
              elm[memberName] = n;
            }
          } else {
            elm[memberName] = newValue;
          }
        } catch (e) {
        }
      }
      if (newValue == null || newValue === false) {
        {
          elm.removeAttribute(memberName);
        }
      } else if ((!isProp || flags & 4 || isSvg) && !isComplex) {
        newValue = newValue === true ? "" : newValue;
        {
          elm.setAttribute(memberName, newValue);
        }
      }
    }
  }
};
var parseClassListRegex = /\s/;
var parseClassList = function(value) {
  return !value ? [] : value.split(parseClassListRegex);
};
var updateElement = function(oldVnode, newVnode, isSvgMode2, memberName) {
  var elm = newVnode.$elm$.nodeType === 11 && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;
  var oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;
  var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;
  {
    for (memberName in oldVnodeAttrs) {
      if (!(memberName in newVnodeAttrs)) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], void 0, isSvgMode2, newVnode.$flags$);
      }
    }
  }
  for (memberName in newVnodeAttrs) {
    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode2, newVnode.$flags$);
  }
};
var createElm = function(oldParentVNode, newParentVNode, childIndex, parentElm) {
  var newVNode2 = newParentVNode.$children$[childIndex];
  var i = 0;
  var elm;
  var childNode;
  if (newVNode2.$text$ !== null) {
    elm = newVNode2.$elm$ = doc.createTextNode(newVNode2.$text$);
  } else {
    if (!isSvgMode) {
      isSvgMode = newVNode2.$tag$ === "svg";
    }
    elm = newVNode2.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode2.$tag$);
    if (isSvgMode && newVNode2.$tag$ === "foreignObject") {
      isSvgMode = false;
    }
    {
      updateElement(null, newVNode2, isSvgMode);
    }
    if (isDef(scopeId) && elm["s-si"] !== scopeId) {
      elm.classList.add(elm["s-si"] = scopeId);
    }
    if (newVNode2.$children$) {
      for (i = 0; i < newVNode2.$children$.length; ++i) {
        childNode = createElm(oldParentVNode, newVNode2, i);
        if (childNode) {
          elm.appendChild(childNode);
        }
      }
    }
    {
      if (newVNode2.$tag$ === "svg") {
        isSvgMode = false;
      } else if (elm.tagName === "foreignObject") {
        isSvgMode = true;
      }
    }
  }
  return elm;
};
var addVnodes = function(parentElm, before, parentVNode, vnodes, startIdx, endIdx) {
  var containerElm = parentElm;
  var childNode;
  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {
    containerElm = containerElm.shadowRoot;
  }
  for (; startIdx <= endIdx; ++startIdx) {
    if (vnodes[startIdx]) {
      childNode = createElm(null, parentVNode, startIdx);
      if (childNode) {
        vnodes[startIdx].$elm$ = childNode;
        containerElm.insertBefore(childNode, before);
      }
    }
  }
};
var removeVnodes = function(vnodes, startIdx, endIdx, vnode, elm) {
  for (; startIdx <= endIdx; ++startIdx) {
    if (vnode = vnodes[startIdx]) {
      elm = vnode.$elm$;
      callNodeRefs(vnode);
      elm.remove();
    }
  }
};
var updateChildren = function(parentElm, oldCh, newVNode2, newCh) {
  var oldStartIdx = 0;
  var newStartIdx = 0;
  var oldEndIdx = oldCh.length - 1;
  var oldStartVnode = oldCh[0];
  var oldEndVnode = oldCh[oldEndIdx];
  var newEndIdx = newCh.length - 1;
  var newStartVnode = newCh[0];
  var newEndVnode = newCh[newEndIdx];
  var node;
  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (oldStartVnode == null) {
      oldStartVnode = oldCh[++oldStartIdx];
    } else if (oldEndVnode == null) {
      oldEndVnode = oldCh[--oldEndIdx];
    } else if (newStartVnode == null) {
      newStartVnode = newCh[++newStartIdx];
    } else if (newEndVnode == null) {
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newStartVnode)) {
      patch(oldStartVnode, newStartVnode);
      oldStartVnode = oldCh[++oldStartIdx];
      newStartVnode = newCh[++newStartIdx];
    } else if (isSameVnode(oldEndVnode, newEndVnode)) {
      patch(oldEndVnode, newEndVnode);
      oldEndVnode = oldCh[--oldEndIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newEndVnode)) {
      patch(oldStartVnode, newEndVnode);
      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
      oldStartVnode = oldCh[++oldStartIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldEndVnode, newStartVnode)) {
      patch(oldEndVnode, newStartVnode);
      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);
      oldEndVnode = oldCh[--oldEndIdx];
      newStartVnode = newCh[++newStartIdx];
    } else {
      {
        node = createElm(oldCh && oldCh[newStartIdx], newVNode2, newStartIdx);
        newStartVnode = newCh[++newStartIdx];
      }
      if (node) {
        {
          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);
        }
      }
    }
  }
  if (oldStartIdx > oldEndIdx) {
    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode2, newCh, newStartIdx, newEndIdx);
  } else if (newStartIdx > newEndIdx) {
    removeVnodes(oldCh, oldStartIdx, oldEndIdx);
  }
};
var isSameVnode = function(vnode1, vnode2) {
  if (vnode1.$tag$ === vnode2.$tag$) {
    return true;
  }
  return false;
};
var patch = function(oldVNode, newVNode2) {
  var elm = newVNode2.$elm$ = oldVNode.$elm$;
  var oldChildren = oldVNode.$children$;
  var newChildren = newVNode2.$children$;
  var tag = newVNode2.$tag$;
  var text = newVNode2.$text$;
  if (text === null) {
    {
      isSvgMode = tag === "svg" ? true : tag === "foreignObject" ? false : isSvgMode;
    }
    {
      {
        updateElement(oldVNode, newVNode2, isSvgMode);
      }
    }
    if (oldChildren !== null && newChildren !== null) {
      updateChildren(elm, oldChildren, newVNode2, newChildren);
    } else if (newChildren !== null) {
      if (oldVNode.$text$ !== null) {
        elm.textContent = "";
      }
      addVnodes(elm, null, newVNode2, newChildren, 0, newChildren.length - 1);
    } else if (oldChildren !== null) {
      removeVnodes(oldChildren, 0, oldChildren.length - 1);
    }
    if (isSvgMode && tag === "svg") {
      isSvgMode = false;
    }
  } else if (oldVNode.$text$ !== text) {
    elm.data = text;
  }
};
var callNodeRefs = function(vNode) {
  {
    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
    vNode.$children$ && vNode.$children$.forEach(callNodeRefs);
  }
};
var renderVdom = function(hostElm, hostRef, cmpMeta, renderFnResults) {
  hostTagName = hostElm.tagName;
  var oldVNode = hostRef.$vnode$ || newVNode(null, null);
  var rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
  rootVnode.$tag$ = null;
  rootVnode.$flags$ |= 4;
  hostRef.$vnode$ = rootVnode;
  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;
  {
    scopeId = hostElm["s-sc"];
  }
  patch(oldVNode, rootVnode);
};
var attachToAncestor = function(hostRef, ancestorComponent) {
  if (ancestorComponent && !hostRef.$onRenderResolve$) {
    ancestorComponent["s-p"].push(new Promise(function(r) {
      return hostRef.$onRenderResolve$ = r;
    }));
  }
};
var scheduleUpdate = function(elm, hostRef, cmpMeta, isInitialLoad) {
  {
    hostRef.$flags$ |= 16;
  }
  if (hostRef.$flags$ & 4) {
    hostRef.$flags$ |= 512;
    return;
  }
  var endSchedule = createTime("scheduleUpdate", cmpMeta.$tagName$);
  var ancestorComponent = hostRef.$ancestorComponent$;
  var instance = hostRef.$lazyInstance$;
  var update = function() {
    return updateComponent(elm, hostRef, cmpMeta, instance, isInitialLoad);
  };
  attachToAncestor(hostRef, ancestorComponent);
  var promise;
  if (isInitialLoad) {
    {
      hostRef.$flags$ |= 256;
      if (hostRef.$queuedListeners$) {
        hostRef.$queuedListeners$.forEach(function(_a) {
          var methodName = _a[0], event = _a[1];
          return safeCall(instance, methodName, event);
        });
        hostRef.$queuedListeners$ = null;
      }
    }
  }
  endSchedule();
  return then(promise, function() {
    return writeTask(update);
  });
};
var updateComponent = function(elm, hostRef, cmpMeta, instance, isInitialLoad) {
  var endUpdate = createTime("update", cmpMeta.$tagName$);
  var rc = elm["s-rc"];
  if (isInitialLoad) {
    attachStyles(elm, cmpMeta, hostRef.$modeName$);
  }
  var endRender = createTime("render", cmpMeta.$tagName$);
  {
    {
      renderVdom(elm, hostRef, cmpMeta, callRender(instance));
    }
  }
  if (plt.$cssShim$) {
    plt.$cssShim$.updateHost(elm);
  }
  {
    hostRef.$flags$ &= ~16;
  }
  {
    hostRef.$flags$ |= 2;
  }
  if (rc) {
    rc.forEach(function(cb) {
      return cb();
    });
    elm["s-rc"] = void 0;
  }
  endRender();
  endUpdate();
  {
    var childrenPromises = elm["s-p"];
    var postUpdate = function() {
      return postUpdateComponent(elm, hostRef, cmpMeta);
    };
    if (childrenPromises.length === 0) {
      postUpdate();
    } else {
      Promise.all(childrenPromises).then(postUpdate);
      hostRef.$flags$ |= 4;
      childrenPromises.length = 0;
    }
  }
};
var callRender = function(instance, elm) {
  try {
    instance = instance.render();
  } catch (e) {
    consoleError(e);
  }
  return instance;
};
var postUpdateComponent = function(elm, hostRef, cmpMeta) {
  var endPostUpdate = createTime("postUpdate", cmpMeta.$tagName$);
  var instance = hostRef.$lazyInstance$;
  var ancestorComponent = hostRef.$ancestorComponent$;
  if (!(hostRef.$flags$ & 64)) {
    hostRef.$flags$ |= 64;
    {
      addHydratedFlag(elm);
    }
    {
      safeCall(instance, "componentDidLoad");
    }
    endPostUpdate();
    {
      hostRef.$onReadyResolve$(elm);
      if (!ancestorComponent) {
        appDidLoad();
      }
    }
  } else {
    endPostUpdate();
  }
  {
    hostRef.$onInstanceResolve$(elm);
  }
  {
    if (hostRef.$onRenderResolve$) {
      hostRef.$onRenderResolve$();
      hostRef.$onRenderResolve$ = void 0;
    }
    if (hostRef.$flags$ & 512) {
      nextTick(function() {
        return scheduleUpdate(elm, hostRef, cmpMeta, false);
      });
    }
    hostRef.$flags$ &= ~(4 | 512);
  }
};
var forceUpdate = function(elm, cmpMeta) {
  {
    var hostRef = getHostRef(elm);
    var isConnected = hostRef.$hostElement$.isConnected;
    if (isConnected && (hostRef.$flags$ & (2 | 16)) === 2) {
      scheduleUpdate(elm, hostRef, cmpMeta, false);
    }
    return isConnected;
  }
};
var appDidLoad = function(who) {
  {
    addHydratedFlag(doc.documentElement);
  }
  {
    plt.$flags$ |= 2;
  }
};
var safeCall = function(instance, method, arg) {
  if (instance && instance[method]) {
    try {
      return instance[method](arg);
    } catch (e) {
      consoleError(e);
    }
  }
  return void 0;
};
var then = function(promise, thenFn) {
  return promise && promise.then ? promise.then(thenFn) : thenFn();
};
var addHydratedFlag = function(elm) {
  return elm.classList.add("hydrated");
};
var addEventListeners = function(elm, hostRef, listeners) {
  hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || [];
  var removeFns = listeners.map(function(_a) {
    var flags = _a[0], name = _a[1], method = _a[2];
    var target = getHostListenerTarget(elm, flags);
    var handler = hostListenerProxy(hostRef, method);
    var opts = hostListenerOpts(flags);
    plt.ael(target, name, handler, opts);
    return function() {
      return plt.rel(target, name, handler, opts);
    };
  });
  return function() {
    return removeFns.forEach(function(fn) {
      return fn();
    });
  };
};
var hostListenerProxy = function(hostRef, methodName) {
  return function(ev) {
    {
      if (hostRef.$flags$ & 256) {
        hostRef.$lazyInstance$[methodName](ev);
      } else {
        hostRef.$queuedListeners$.push([methodName, ev]);
      }
    }
  };
};
var getHostListenerTarget = function(elm, flags) {
  if (flags & 32)
    return doc.body;
  return elm;
};
var hostListenerOpts = function(flags) {
  return (flags & 2) !== 0;
};
var parsePropertyValue = function(propValue, propType) {
  if (propValue != null && !isComplexType(propValue)) {
    if (propType & 4) {
      return propValue === "false" ? false : propValue === "" || !!propValue;
    }
    if (propType & 2) {
      return parseFloat(propValue);
    }
    if (propType & 1) {
      return String(propValue);
    }
    return propValue;
  }
  return propValue;
};
var getValue = function(ref, propName) {
  return getHostRef(ref).$instanceValues$.get(propName);
};
var setValue = function(ref, propName, newVal, cmpMeta) {
  var hostRef = getHostRef(ref);
  var elm = hostRef.$hostElement$;
  var oldVal = hostRef.$instanceValues$.get(propName);
  var flags = hostRef.$flags$;
  var instance = hostRef.$lazyInstance$;
  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
  if (newVal !== oldVal && (!(flags & 8) || oldVal === void 0)) {
    hostRef.$instanceValues$.set(propName, newVal);
    if (instance) {
      if ((flags & (2 | 16)) === 2) {
        scheduleUpdate(elm, hostRef, cmpMeta, false);
      }
    }
  }
};
var proxyComponent = function(Cstr, cmpMeta, flags) {
  if (cmpMeta.$members$) {
    var members = Object.entries(cmpMeta.$members$);
    var prototype_1 = Cstr.prototype;
    members.forEach(function(_a) {
      var memberName = _a[0], memberFlags = _a[1][0];
      if (memberFlags & 31 || flags & 2 && memberFlags & 32) {
        Object.defineProperty(prototype_1, memberName, {
          get: function() {
            return getValue(this, memberName);
          },
          set: function(newValue) {
            setValue(this, memberName, newValue, cmpMeta);
          },
          configurable: true,
          enumerable: true
        });
      } else if (flags & 1 && memberFlags & 64) {
        Object.defineProperty(prototype_1, memberName, {
          value: function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var ref = getHostRef(this);
            return ref.$onInstancePromise$.then(function() {
              var _a2;
              return (_a2 = ref.$lazyInstance$)[memberName].apply(_a2, args);
            });
          }
        });
      }
    });
    if (flags & 1) {
      var attrNameToPropName_1 = /* @__PURE__ */ new Map();
      prototype_1.attributeChangedCallback = function(attrName, _oldValue, newValue) {
        var _this = this;
        plt.jmp(function() {
          var propName = attrNameToPropName_1.get(attrName);
          _this[propName] = newValue === null && typeof _this[propName] === "boolean" ? false : newValue;
        });
      };
      Cstr.observedAttributes = members.filter(
        function(_a) {
          var _ = _a[0], m = _a[1];
          return m[0] & 15;
        }
        /* HasAttribute */
      ).map(function(_a) {
        var propName = _a[0], m = _a[1];
        var attrName = m[1] || propName;
        attrNameToPropName_1.set(attrName, propName);
        return attrName;
      });
    }
  }
  return Cstr;
};
var initializeComponent = function(elm, hostRef, cmpMeta, hmrVersionId, Cstr) {
  return __awaiter(void 0, void 0, void 0, function() {
    var endLoad, endNewInstance, scopeId_1, endRegisterStyles, style_1, ancestorComponent, schedule;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!((hostRef.$flags$ & 32) === 0))
            return [3, 5];
          hostRef.$flags$ |= 32;
          Cstr = loadModule(cmpMeta);
          if (!Cstr.then)
            return [3, 2];
          endLoad = uniqueTime();
          return [4, Cstr];
        case 1:
          Cstr = _a.sent();
          endLoad();
          _a.label = 2;
        case 2:
          if (!Cstr.isProxied) {
            proxyComponent(
              Cstr,
              cmpMeta,
              2
              /* proxyState */
            );
            Cstr.isProxied = true;
          }
          endNewInstance = createTime("createInstance", cmpMeta.$tagName$);
          {
            hostRef.$flags$ |= 8;
          }
          try {
            new Cstr(hostRef);
          } catch (e) {
            consoleError(e);
          }
          {
            hostRef.$flags$ &= ~8;
          }
          endNewInstance();
          scopeId_1 = getScopeId(cmpMeta.$tagName$);
          if (!(!styles.has(scopeId_1) && Cstr.style))
            return [3, 5];
          endRegisterStyles = createTime("registerStyles", cmpMeta.$tagName$);
          style_1 = Cstr.style;
          if (!(cmpMeta.$flags$ & 8))
            return [3, 4];
          return [4, import("./shadow-css-d7d058ec-d59cb009-F2G3A4TT.js").then(function(m) {
            return m.scopeCss(style_1, scopeId_1, false);
          })];
        case 3:
          style_1 = _a.sent();
          _a.label = 4;
        case 4:
          registerStyle(scopeId_1, style_1, !!(cmpMeta.$flags$ & 1));
          endRegisterStyles();
          _a.label = 5;
        case 5:
          ancestorComponent = hostRef.$ancestorComponent$;
          schedule = function() {
            return scheduleUpdate(elm, hostRef, cmpMeta, true);
          };
          if (ancestorComponent && ancestorComponent["s-rc"]) {
            ancestorComponent["s-rc"].push(schedule);
          } else {
            schedule();
          }
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var connectedCallback = function(elm, cmpMeta) {
  if ((plt.$flags$ & 1) === 0) {
    var endConnected = createTime("connectedCallback", cmpMeta.$tagName$);
    var hostRef_1 = getHostRef(elm);
    if (cmpMeta.$listeners$) {
      hostRef_1.$rmListeners$ = addEventListeners(elm, hostRef_1, cmpMeta.$listeners$);
    }
    if (!(hostRef_1.$flags$ & 1)) {
      hostRef_1.$flags$ |= 1;
      {
        var ancestorComponent = elm;
        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {
          if (ancestorComponent["s-p"]) {
            attachToAncestor(hostRef_1, hostRef_1.$ancestorComponent$ = ancestorComponent);
            break;
          }
        }
      }
      if (cmpMeta.$members$) {
        Object.entries(cmpMeta.$members$).forEach(function(_a) {
          var memberName = _a[0], memberFlags = _a[1][0];
          if (memberFlags & 31 && elm.hasOwnProperty(memberName)) {
            var value = elm[memberName];
            delete elm[memberName];
            elm[memberName] = value;
          }
        });
      }
      {
        nextTick(function() {
          return initializeComponent(elm, hostRef_1, cmpMeta);
        });
      }
    }
    endConnected();
  }
};
var disconnectedCallback = function(elm) {
  if ((plt.$flags$ & 1) === 0) {
    var hostRef = getHostRef(elm);
    var instance = hostRef.$lazyInstance$;
    {
      if (hostRef.$rmListeners$) {
        hostRef.$rmListeners$();
        hostRef.$rmListeners$ = void 0;
      }
    }
    if (plt.$cssShim$) {
      plt.$cssShim$.removeHost(elm);
    }
    {
      safeCall(instance, "componentDidUnload");
    }
  }
};
var bootstrapLazy = function(lazyBundles, options) {
  if (options === void 0) {
    options = {};
  }
  var endBootstrap = createTime();
  var cmpTags = [];
  var exclude = options.exclude || [];
  var customElements = win.customElements;
  var head = doc.head;
  var metaCharset = head.querySelector("meta[charset]");
  var visibilityStyle = doc.createElement("style");
  var deferredConnectedCallbacks = [];
  var appLoadFallback;
  var isBootstrapping = true;
  Object.assign(plt, options);
  plt.$resourcesUrl$ = new URL(options.resourcesUrl || "./", doc.baseURI).href;
  if (options.syncQueue) {
    plt.$flags$ |= 4;
  }
  lazyBundles.forEach(function(lazyBundle) {
    return lazyBundle[1].forEach(function(compactMeta) {
      var cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
        $members$: compactMeta[2],
        $listeners$: compactMeta[3]
      };
      {
        cmpMeta.$members$ = compactMeta[2];
      }
      {
        cmpMeta.$listeners$ = compactMeta[3];
      }
      if (!supportsShadowDom && cmpMeta.$flags$ & 1) {
        cmpMeta.$flags$ |= 8;
      }
      var tagName = cmpMeta.$tagName$;
      var HostElement = (
        /** @class */
        function(_super) {
          __extends(HostElement2, _super);
          function HostElement2(self) {
            var _this = (
              // @ts-ignore
              _super.call(this, self) || this
            );
            self = _this;
            registerHost(self);
            if (cmpMeta.$flags$ & 1) {
              if (supportsShadowDom) {
                {
                  self.attachShadow({ mode: "open" });
                }
              } else if (!("shadowRoot" in self)) {
                self.shadowRoot = self;
              }
            }
            return _this;
          }
          HostElement2.prototype.connectedCallback = function() {
            var _this = this;
            if (appLoadFallback) {
              clearTimeout(appLoadFallback);
              appLoadFallback = null;
            }
            if (isBootstrapping) {
              deferredConnectedCallbacks.push(this);
            } else {
              plt.jmp(function() {
                return connectedCallback(_this, cmpMeta);
              });
            }
          };
          HostElement2.prototype.disconnectedCallback = function() {
            var _this = this;
            plt.jmp(function() {
              return disconnectedCallback(_this);
            });
          };
          HostElement2.prototype.forceUpdate = function() {
            forceUpdate(this, cmpMeta);
          };
          HostElement2.prototype.componentOnReady = function() {
            return getHostRef(this).$onReadyPromise$;
          };
          return HostElement2;
        }(HTMLElement)
      );
      cmpMeta.$lazyBundleIds$ = lazyBundle[0];
      if (!exclude.includes(tagName) && !customElements.get(tagName)) {
        cmpTags.push(tagName);
        customElements.define(tagName, proxyComponent(
          HostElement,
          cmpMeta,
          1
          /* isElementConstructor */
        ));
      }
    });
  });
  {
    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;
    visibilityStyle.setAttribute("data-styles", "");
    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);
  }
  isBootstrapping = false;
  if (deferredConnectedCallbacks.length > 0) {
    deferredConnectedCallbacks.forEach(function(host) {
      return host.connectedCallback();
    });
  } else {
    {
      plt.jmp(function() {
        return appLoadFallback = setTimeout(appDidLoad, 30);
      });
    }
  }
  endBootstrap();
};

// node_modules/@ionic/pwa-elements/dist/esm-es5/loader.mjs
var defineCustomElements = function(win2, options) {
  return patchEsm().then(function() {
    bootstrapLazy([["pwa-camera-modal", [[1, "pwa-camera-modal", { "facingMode": [1, "facing-mode"], "present": [64], "dismiss": [64] }]]], ["pwa-action-sheet", [[1, "pwa-action-sheet", { "header": [1], "cancelable": [4], "options": [16], "open": [32] }]]], ["pwa-toast", [[1, "pwa-toast", { "message": [1], "duration": [2], "closing": [32] }]]], ["pwa-camera", [[1, "pwa-camera", { "facingMode": [1, "facing-mode"], "handlePhoto": [16], "handleNoDeviceError": [16], "noDevicesText": [1, "no-devices-text"], "noDevicesButtonText": [1, "no-devices-button-text"], "photo": [32], "photoSrc": [32], "showShutterOverlay": [32], "flashIndex": [32], "hasCamera": [32], "rotation": [32], "deviceError": [32] }]]], ["pwa-camera-modal-instance", [[1, "pwa-camera-modal-instance", { "facingMode": [1, "facing-mode"], "noDevicesText": [1, "no-devices-text"], "noDevicesButtonText": [1, "no-devices-button-text"] }, [[32, "keyup", "handleBackdropKeyUp"]]]]]], options);
  });
};

// node_modules/@ionic/pwa-elements/loader/index.mjs
(function() {
  if (
    // No Reflect, no classes, no need for shim because native custom elements
    // require ES2015 classes or Reflect.
    window.Reflect === void 0 || window.customElements === void 0
  ) {
    return;
  }
  var BuiltInHTMLElement = HTMLElement;
  window.HTMLElement = /** @this {!Object} */
  function HTMLElement2() {
    return Reflect.construct(
      BuiltInHTMLElement,
      [],
      /** @type {!Function} */
      this.constructor
    );
  };
  HTMLElement.prototype = BuiltInHTMLElement.prototype;
  HTMLElement.prototype.constructor = HTMLElement;
  Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
})();
export {
  applyPolyfills,
  defineCustomElements
};
//# sourceMappingURL=@ionic_pwa-elements_loader.js.map
